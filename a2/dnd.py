import random


def roll_die(number_of_rolls, number_of_sides):
    """Die rolling simulator
    This function simulator the process of rolling a die, return the sum of the individual rolls.

    :param number_of_rolls: a positive non-zero integer.
    :param number_of_sides: a positive non-zero integer.
    :precondition: number_of_rolls and number_of_sides must be positive non-zero integers.
    :postcondition: return the sum of the individual rolls.
    :return: the sum of the individual rolls as an integer.
    """
    count = 0
    roll_sum = 0
    while count < number_of_rolls:
        roll_result = random.randint(1, number_of_sides)
        count += 1
        roll_sum += roll_result
    return roll_sum


def generate_vowel():
    """ Random vowel generator

    :postcondition: randomly select a single vowel.
    :return: a randomly selected single vowel as a string.
    """
    vowel_list = ['a', 'e', 'i', 'o', 'u', 'y']
    vowel_result = random.choice(vowel_list)
    return vowel_result


def generate_consonant():
    """ Random consonant generator

    :postcondition: randomly select a single consonant.
    :return: a randomly selected single consonant as a string.
    """
    consonant_list = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',
                      'p', 'q', 'r', 's', 't', 'v', 'x', 'z', 'w', 'y']

    consonant_result = random.choice(consonant_list)
    return consonant_result


def generate_syllable():
    """ Syllable generator
    Generate a two-lettered syllable by joining the random consonant generated by generate_consonant()
    and the random vowel generated by generate_vowel().

    :precondition: the random consonant must be generated by generate_consonant(),
                   and the random vowel must be generated by generate_vowel().
    :postcondition: concatenate the consonant and vowel in this exact order, to a two-letter syllable as a string.
    :return: the correctly concatenate two-letter syllable as a string.
    """
    syllable_result = generate_consonant() + generate_vowel()
    return syllable_result


def generate_name(syllables):
    """ Name generator
    Generate a name by joining a certain number of two-lettered syllables generated by generate_syllable().

    :param syllables: a positive integer.
    :precondition: syllables must be a positive non-zero integer.
    :postcondition: generate a name composed of the specified number of two-lettered syllables.
    :return: correctly generate a name composed of the specified number of two-lettered syllables as a string
    """

    count = 0
    name_result = ''
    while count < syllables:
        syllables_generated = generate_syllable()
        name_result += syllables_generated
        count += 1
    return name_result


def create_character(syllables):
    """ Create a Dungeons and Dragons character

    :param syllables: a positive integer.
    :precondition: syllables must be a positive non-zero integer.
    :postcondition: return a dictionary which represents the character.
    :return: correctly return a Dungeons and Dragons character as a dictionary.
    """
    if type(syllables) != int:
        # check if the type of the syllables is not a integer
        print("Warning: this is not a correct input, please enter a positive integer.")
        return None
    elif syllables <= 0:
        # check if syllables is a positive non-zero integer
        print("Warning: this is not a correct input, please enter a positive integer.")
        return None
    else:
        character = {
            'Name': generate_name(syllables),
            'Strength': roll_die(3, 6),
            'Intelligence': roll_die(3, 6),
            'Wisdom': roll_die(1, 6) + roll_die(1, 6) + roll_die(1, 6),
            'Dexterity': roll_die(1, 6) + roll_die(1, 6) + roll_die(1, 6),
            'Constitution': roll_die(1, 6) + roll_die(1, 6) + roll_die(1, 6),
            'Charisma': roll_die(1, 6) + roll_die(1, 6) + roll_die(1, 6),
            'inventory': [],
            'experience points': 0,
            'class': select_class(),
            'Race': select_race(),
        }

        if character['class'] == 'Barbarian':
            max_hp = roll_die(1, 12)
            current_hp = max_hp
            character['HP'] = [max_hp, current_hp]
        elif character['class'] == 'Fighter' or character['class'] == 'Paladin' or character['class'] == 'Ranger':
            max_hp = roll_die(1, 10)
            current_hp = max_hp
            character['HP'] = [max_hp, current_hp]
        elif character['class'] == 'Sorcerer' or character['class'] == 'Wizard':
            max_hp = roll_die(1, 6)
            current_hp = max_hp
            character['HP'] = [max_hp, current_hp]
        else:
            max_hp = roll_die(1, 8)
            current_hp = max_hp
            character['HP'] = [max_hp, current_hp]

    return character


def select_class():
    """ Select a class
    Select a class for user's character from the twelve classes in Dungeons & Dragons.

    :precondition: user must enter a positive integer between 1 to 12.
    :postcondition: prints out a list of classes to the player and asks the player to select the class they want to play
    :return: the race that the player desired as a string
    """
    my_dictionary = {
        '1': 'Barbarian',
        '2': 'Bard',
        '3': 'Cleric',
        '4': 'Druid',
        '5': 'Fighter',
        '6': 'Monk',
        '7': 'Paladin',
        '8': 'Ranger',
        '9': 'Rogue',
        '10': 'Sorcerer',
        '11': 'Warlock',
        '12': 'Wizard'
    }
    while True:
        print("Please choose your class! ")
        for x, y in my_dictionary.items():
            print(x, y)
        player_num = str(input("please enter the number of the class you desired: ").strip())
        if player_num in my_dictionary:
            player_class = my_dictionary[player_num]
            return player_class
        else:
            continue


def select_race():
    """ Select a race
    Select a race for user's character from the nine classes in Dungeons & Dragons.

    :precondition: user must enter a positive integer between 1 to 9.
    :postcondition: prints out a list of races to the player and asks the player to select the race they want to play
    :return: the race that the player desired as a string
    """
    my_dictionary = {
        '1': 'Dragonborn',
        '2': 'Dwarf',
        '3': 'Elf',
        '4': 'Gnome',
        '5': 'Half-Elf',
        '6': 'Halfling',
        '7': 'Half-Orc',
        '8': 'Human',
        '9': 'Tiefling'
    }
    while True:
        print("Please choose your class! ")
        for x, y in my_dictionary.items():
            print(x, y)
        player_num = str(input("please enter the number of the class you desired: ").strip())
        if player_num in my_dictionary:
            player_race = my_dictionary[player_num]
            return player_race
        else:
            continue


def print_character(character):
    """Print character information
    This function print a list of the character's information which is generated by the create_character function.

    :param character:a list formatted by the create_character function.
    :precondition: character must be formed my the the create_character function.
    :postcondition: print the character list formatted by the create_character function.
    """
    for x, y in character.items():
        print(x, y)


def choose_inventory(character):
    """Choose inventory items
    This function prints a list of goods to the screen and ask the player what they want to buy.

    :param character:a list formatted by the create_character function.
    :precondition: character must be well formatted by the create_character function.
    :postcondition: must print a list of goods to the screen and ask the player what they want to buy.
    """
    menu = ("Welcome to the Olde Tyme Merchant!\n"
            " \n"
            "Here is what we have for sale:\n"
            " \n"
            "1. sword\n"
            "2. dagger\n"
            "3. Iris(sword)\n"
            "4. a stack of cash from Rihanna\n"
            "5. Black Unicorn Relic Steel Sword\n"
            "6. Flamethrower\n"
            "7. W870 Shotgun\n"
            "8. mario‘s hat\n"
            "9. Silence Glaive\n"
            "10.Crystal Carillon")

    inventory_dictionary = {
        '1': 'sword',
        '2': 'dagger',
        '3': 'Iris(sword)',
        '4': 'a stack of cash from Rihanna',
        '5': 'Black Unicorn Relic Steel Sword',
        '6': 'Flamethrower',
        '7': 'W870 Shotgun',
        '8': 'mario‘s hat',
        '9': 'Silence Glaive',
        '10': 'Crystal Carillon',
    }

    inventory_list = []

    while True:
        print(menu)
        player_select = input("What would you like to buy (-1 to finish):\n").strip()
        if player_select in inventory_dictionary:
            inventory_list.append(inventory_dictionary[player_select])
        elif player_select == '-1':
            character['inventory'] = inventory_list
            break
        else:
            print("You are asking for something we do not carry, want to choose again?")
            continue


def combat_round(opponent_one, opponent_two):
    """ Simulate a round of combat
    This function represents a single round of combat, each combatants gets a turn to do something
    during a single round of combat.

    :param opponent_one: a well-formed dictionaries containing a correct character
    :param opponent_two: a well-formed dictionaries containing a correct character
    :precondition: both parameters must be well-formed dictionaries that each containing a correct character
    :postcondition: the modified opponent_one and opponent_two as two separated dictionaries.
    """
    while True:
        opponent_one_roll = roll_die(1, 20)
        opponent_two_roll = roll_die(1, 20)

        if opponent_one_roll == opponent_two_roll:
            continue
        else:
            if opponent_one_roll > opponent_two_roll:
                attack(opponent_one, opponent_two)
            elif opponent_two_roll > opponent_one_roll:
                attack(opponent_two, opponent_one)
        break


def attack(attacker, defender):
    """ Simulate attack action

    :param attacker: a well-formed dictionaries containing a correct character.
    :param defender: a well-formed dictionaries containing a correct character.
    :precondition: both parameters must be well-formed dictionaries that each containing a correct character.
    :postcondition: the modified opponent_one and opponent_two as two separated dictionaries.
    """
    if attacker['HP'][1] > 0:
        attacker_roll = roll_die(1, 20)
        print(attacker['Name'], 'is attacking', defender['Name'], 'by', attacker_roll)
        if attacker_roll > defender['Dexterity']:
            defender['HP'][1] -= attacker_roll
            if defender['HP'][1] <= 0:
                print(defender['Name'], 'is dead')
                defender['HP'][1] = 0
            else:
                print(defender['Name'], 'still alive')
                defender_roll = roll_die(1, 20)
                print(defender['Name'], 'is going to attack by', defender_roll)
                if defender_roll > attacker['Dexterity']:
                    attacker['HP'][1] -= defender_roll
                    if attacker['HP'][1] <= 0:
                        print(attacker['Name'], 'is dead')
                        attacker['HP'][1] = 0
                    else:
                        print(attacker['Name'], 'is alive')
                else:
                    print(defender['Name'], 'missed', attacker['Name'], 'is alive')
        else:
            defender_roll = roll_die(1, 20)
            print(attacker['Name'], 'missed')
            print(defender['Name'], 'is going to attack now by', defender_roll)
            if defender_roll > attacker['Dexterity']:
                attacker['HP'][1] -= defender_roll
                if attacker['HP'][1] <= 0:
                    print(attacker['Name'], 'is dead')
                    attacker['HP'][1] = 0
                else:
                    print(attacker['Name'], 'is alive')
            else:
                print(defender['Name'], 'missed', attacker['Name'], 'still alive')


def main():
    syllables = int(input("Please select the number of syllables for their character’s name: "))
    character = create_character(syllables)
    print('')
    print_character(character)
    choose_inventory(character)
    print_character(character)
    print('')
    the_greatest_villain_of_all_time = {
        'Name': 'Loki',
        'Strength': 5,
        'Intelligence': 20,
        'Wisdom': 20,
        'Dexterity': 6,
        'Constitution': 20,
        'Charisma': 6,
        'inventory': ['The Scepter'],
        'experience points': 0,
        'class': 'sorcerer',
        'Race': 'the Frost Giants in Jotunheim',
        'HP': [20, 20]
    }
    print('')
    print_character(the_greatest_villain_of_all_time)
    print('')
    combat_round(character, the_greatest_villain_of_all_time)
    print('')
    print_character(character)
    print('')
    print_character(the_greatest_villain_of_all_time)


if __name__ == "__main__":
    main()
